{"version":3,"sources":["logo.svg","components/Card/Card.js","components/card-list/CardList.js","components/searchBox/search-box.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","name","className","src","width","height","alt","style","margin","CardList","monstersList","map","monster","index","key","SearchBox","searchInput","InputGroup","size","FormControl","aria-label","aria-describedby","type","placeholder","onChange","boxShadow","color","fontWeight","App","searchChangeHandler","event","setState","searchField","target","value","showList","state","listOn","monsters","fetch","then","response","json","users","catch","err","console","log","this","filteredMonststers","filter","toLowerCase","includes","length","marginTop","fontSize","logo","Button","variant","onClick","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,sQCG7BC,G,MAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvB,OACK,yBAAKC,UAAU,kBAEV,yBAAKC,IAAG,mCAA8BH,GAAMI,MAAM,QAAQC,OAAO,QAAQC,IAAI,WAAWC,MAAO,CAACC,OAAQ,YACxG,6BACK,2BAAIP,OCLXQ,G,MAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEtB,OACK,yBAAKR,UAAU,aAEVQ,EAAaC,KAAI,SAACC,EAASC,GACtB,OACK,kBAAC,EAAD,CACAC,IAAKF,EAAQZ,GACbA,GAAIU,EAAaG,GAAOb,GACxBC,KAAMS,EAAaG,GAAOZ,a,wBCRtCc,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACvB,OACK,6BACK,kBAACC,EAAA,EAAD,CAAYC,KAAK,KAChBX,MAAO,CACHH,MAAO,MACPI,OAAQ,oBAGR,kBAACW,EAAA,EAAD,CAAaC,aAAW,QAAQC,mBAAiB,uBACjDC,KAAK,SACLC,YAAY,WACZC,SAAUR,EACVT,MAAO,CACFkB,UAAW,gCACXC,MAAO,oBACPC,WAAY,Y,yBC4EtBC,G,kBApFb,aAAe,IAAD,8BACZ,+CASFC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAX7B,EAedC,SAAU,WACV,IAAMA,EAAW,EAAKC,MAAMC,OAC5B,EAAKN,SAAS,CAACM,QAASF,KAftB,EAAKC,MAAQ,CACXE,SAAU,GACVN,YAAa,GACbK,QAAQ,GALE,E,iFAqBM,IAAD,OACjBE,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OACX,EAAKZ,SAAS,CAACO,SAAUK,OACxBC,OAAM,SAAAC,GAAG,OAAKC,QAAQC,IAAIF,Q,+BAGnB,IAAD,EAE2BG,KAAKZ,MAA/BE,EAFD,EAECA,SAAUN,EAFX,EAEWA,YACZiB,EAAqBX,EAASY,QAAO,SAAAtC,GACzC,OAAOA,EAAQX,KAAKkD,cAAcC,SAASpB,EAAYmB,kBAErDzC,EAAe,KAWnB,OAVGsC,KAAKZ,MAAMC,SACZ3B,EAEE,6BACE,kBAAC,EAAD,CACFA,aAAcuC,MAOa,IAA7BD,KAAKZ,MAAME,SAASe,OACpB,wBAAInD,UAAU,WAAd,mBAEA,yBAAKA,UAAU,OACb,6BACA,wBAAIK,MAAO,CAAC+C,UAAU,OACpB,4BAAI,wBAAI/C,MAAO,CAAEgD,SAAU,uBAAvB,kBAEJ,4BACE,yBAAKpD,IAAKqD,IAAMtD,UAAU,WAAWI,IAAI,YAI7C,kBAAC,EAAD,CACAU,YAAagC,KAAKnB,sBAElB,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,eAChBC,QAASX,KAAKb,SACdjC,UAAU,WACVK,MAAO,CACLmB,MAAO,qBACP6B,SAAU,SACVK,QAAS,SAGVZ,KAAKZ,MAAMC,OACX,YACC,aAED3B,EA1BH,S,GApDYmD,cCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.e299e37c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Card.style.css\";\r\n\r\n export const Card = ({ id, name }) => {\r\n     return (\r\n          <div className=\"card-container\">\r\n          \r\n               <img src={`https://www.robohash.org/${id}`} width=\"250px\" height=\"250px\" alt=\"monsters\" style={{margin: \"0 auto\"}}/>\r\n               <div>\r\n                    <p>{name}</p>\r\n                    \r\n               </div>\r\n               \r\n          \r\n          </div>\r\n     )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Card } from \"../Card/Card\"\r\nimport \"./CardList.style.css\"\r\n\r\nexport const CardList = ({ monstersList }) => {\r\n     \r\n     return (\r\n          <div className=\"card-list\">\r\n          {           \r\n               monstersList.map((monster, index)=>{\r\n                    return (\r\n                         <Card \r\n                         key={monster.id}\r\n                         id={monstersList[index].id}\r\n                         name={monstersList[index].name}                        \r\n                         />\r\n                    )\r\n               })\r\n          }        \r\n          </div>    \r\n     )     \r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.style.css\";\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\n\r\nexport const SearchBox = ({ searchInput }) => {\r\n     return (\r\n          <div>\r\n               <InputGroup size=\"lg\"\r\n                style={{\r\n                    width: \"30%\",\r\n                    margin: \"6% auto 4% auto\"                   \r\n                    }}\r\n               >\r\n                    <FormControl aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-lg\"\r\n                    type=\"search\"\r\n                    placeholder=\"Search..\"\r\n                    onChange={searchInput}\r\n                    style={{\r\n                         boxShadow: \"1px 1px 5px rgb(21, 233, 180)\",\r\n                         color: \"rgb(92, 105, 109)\",\r\n                         fontWeight: \"100\"                   \r\n                         }}                 \r\n                    />\r\n               </InputGroup>\r\n               \r\n          </div>\r\n     )\r\n}","import React, { Component } from 'react';\nimport { CardList }from \"../src/components/card-list/CardList\"\nimport { SearchBox } from \"../src/components/searchBox/search-box\";\nimport Button from 'react-bootstrap/Button';\nimport logo from \"./logo.svg\";\n\n\n\n\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor (){\n    super()\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n      listOn: true\n    }\n  }\n\n  // properties:\n  searchChangeHandler = (event) => {\n    this.setState({searchField: event.target.value})\n  }\n\n  //show list on/off\n  showList =() => {\n  const showList = this.state.listOn;\n  this.setState({listOn: !showList})\n  } \n\n  //React Life Cycles\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users =>\n    this.setState({monsters: users}))\n    .catch(err => (console.log(err)))\n  }\n  \n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonststers = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    let monstersList = null;\n    if(this.state.listOn){\n      monstersList = (\n        \n        <div>\n          <CardList\n        monstersList={filteredMonststers}/>\n        </div>  \n      )\n    }\n     \n    return ( \n           \n      this.state.monsters.length===0?\n      <h1 className=\"loading\">Please wait ...</h1>:\n\n      <div className=\"App\">            \n        <nav>\n        <ul style={{marginTop:\"5%\"}}>      \n          <li><h1 style={{ fontSize: \"calc(30px + 3vmin)\"}}>Robo Monsters</h1>\n          </li>\n          <li>\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/></li>\n          </ul>\n          </nav>\n        \n        <SearchBox\n        searchInput={this.searchChangeHandler}\n        />   \n        <Button variant=\"outline-info\"\n        onClick={this.showList}\n        className=\"btn-list\"\n        style={{\n          color: \"rgb(100, 220, 250)\",\n          fontSize: \"1.15em\",\n          padding: \"10px\"\n        }}\n        >\n        {this.state.listOn?         \n         \"Hide List\":\n          \"Show List\"}         \n          </Button>          \n        {monstersList} {/* the else statement */}\n      </div> \n  )\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}