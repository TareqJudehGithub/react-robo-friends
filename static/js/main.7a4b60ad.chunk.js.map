{"version":3,"sources":["components/Header/logo.svg","components/Header/Header.jsx","components/Cards/Card.jsx","components/Cards/CardList.jsx","components/Layout/Loading.jsx","components/Layout/Scroll.jsx","components/ErrorBoundry/ErrorBoundry.jsx","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","searchInput","Navbar","fixed","style","padding","Brand","className","fontSize","margin","alt","src","logo","InputGroup","size","width","FormControl","aria-label","aria-describedby","type","placeholder","onChange","boxShadow","color","fontWeight","Card","id","name","email","height","CardList","robots","map","monster","key","Loading","animation","Scroll","children","overflowY","scrollBehavior","ErrorBoundry","state","hasError","error","info","this","setState","props","Component","App","searchChangeHandler","event","searchField","target","value","loading","listOn","Axios","get","response","data","console","log","message","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a4b60ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\n\r\nimport logo from \"./logo.svg\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nconst Header = ({ searchInput }) => {\r\n     return(\r\n          <>\r\n          <Navbar fixed=\"top\" style={{padding:\"0\"}} >\r\n               <Navbar.Brand\r\n               className=\"header\"\r\n               style={{ \r\n                    fontSize: \"calc(30px + 3vmin)\",          \r\n                    margin: \"auto 0px auto 0\"        \r\n                    }}\r\n               >\r\n                    <img\r\n                    alt=\"React-logo\"\r\n                    src={logo}            \r\n                    className=\" App-logo\"\r\n                    />\r\n                    <span>Robo friends</span>\r\n                    <InputGroup size=\"lg\" fixed=\"top\"\r\n                         style={{ width: \"30%\",margin: \"25px auto\" }}\r\n                         >\r\n                         <FormControl \r\n                              aria-label=\"Large\" \r\n                              aria-describedby=\"inputGroup-sizing-lg\"\r\n                              width=\"50px\" \r\n                              type=\"search\"\r\n                              placeholder=\"Search..\"\r\n                              onChange={searchInput}\r\n                              style={{\r\n                                   boxShadow: \"1px 1px 5px rgb(21, 233, 180)\",\r\n                                   color: \"rgb(92, 105, 109)\",\r\n                                   fontWeight: \"100\"                   \r\n                              }}                 \r\n                         />\r\n                    </InputGroup>\r\n               </Navbar.Brand>\r\n          </Navbar>\r\n</>\r\n     )\r\n}\r\nexport default  Header;","import React from \"react\";\r\n\r\n\r\nconst Card = ({ id, name, email }) => {\r\n     return (\r\n          <div className=\"card-container\">\r\n          \r\n               <img src={`https://robohash.org/${id}`} \r\n                    width=\"250px\" height=\"250px\" alt=\"monsters\" \r\n                    style={{margin: \"0 auto\"}}/>\r\n               <div className=\"card-name\">\r\n                    <p>{name}</p>\r\n                    <p style={{fontSize:\"12.5px\"}}>{email}</p>\r\n                    \r\n               </div>\r\n               \r\n          \r\n          </div>\r\n     )\r\n}\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\"\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n     \r\n     return (\r\n          <div className=\"card-list\">\r\n          {           \r\n               robots.map(monster =>{\r\n                    return (            \r\n                         <Card \r\n                         key={monster.id}\r\n                         id={monster.id}\r\n                         name={monster.name}                      \r\n                         />\r\n                    )\r\n               })\r\n          }        \r\n          </div>    \r\n     )     \r\n};\r\nexport default  CardList;","import React from 'react';\r\n\r\nexport const Loading = () => {\r\n     return (\r\n          <div className=\"loading\">\r\n              <h1 \r\n              style={{ animation: \"loading 1s linear infinite alternate\"}}\r\n              > \r\n               Loading..please wait..\r\n               </h1>\r\n          </div>\r\n     )\r\n}\r\nexport default Loading;","import React from 'react';\r\n\r\n\r\nexport const Scroll = ({children}) => {\r\n     return (\r\n          <div style={{\r\n               overflowY: \"hidden\", scrollBehavior: \"smooth\", height: \"auto\"\r\n          }}> \r\n              {children}\r\n          </div>\r\n     )\r\n}\r\nexport default Scroll;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n     constructor() {\r\n          super()\r\n          this.state = {\r\n               hasError: false\r\n          }\r\n     }\r\n\r\n     componentDidCatch(error, info){  // like try/catch\r\n          this.setState({ hasError: true});\r\n     }\r\n     render(){\r\n          const { hasError } = this.state;\r\n          if (hasError) {\r\n               return <h1>Error!</h1>\r\n          }\r\n          return(\r\n               <div>\r\n                    {this.props.children}\r\n               </div>\r\n          )\r\n     }\r\n}\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\n\r\nimport Header from '../components/Header/Header';\r\nimport CardList from \"../components/Cards/CardList\"\r\n\r\nimport Loading from \"../components/Layout/Loading\";\r\nimport Scroll from \"../components/Layout/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry/ErrorBoundry\";\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor (){\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n      loading: false,\r\n      listOn: true\r\n    }\r\n  }\r\n\r\n  // Search robots method:\r\n  searchChangeHandler = (event) => {\r\n    this.setState({searchField: event.target.value})\r\n  }\r\n\r\n  // Fetching API data with Axios:\r\n  async componentDidMount(){\r\n    this.setState({ loading: true});\r\n    try {\r\n      const response = await Axios.get(\"https://gorest.co.in/public-api/users\")\r\n      this.setState({ robots: response.data.data});\r\n      this.setState({ loading: false});\r\n    } catch (error) {\r\n      return console.log(error.message);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchField, loading } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return ( \r\n      <div className=\"App\"> \r\n         <ErrorBoundry>\r\n        <Header searchInput={this.searchChangeHandler}/>                \r\n        <Scroll>     \r\n          {\r\n            loading\r\n            ? \r\n            <Loading />\r\n            :\r\n            <CardList robots={filteredRobots}/>\r\n          }   \r\n        </Scroll>\r\n        </ErrorBoundry> \r\n      </div> \r\n  )\r\n};\r\n  \r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './container/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}