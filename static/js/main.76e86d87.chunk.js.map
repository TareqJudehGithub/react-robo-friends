{"version":3,"sources":["components/nav/logo.svg","components/Card/Card.js","components/card-list/CardList.js","components/searchBox/search-box.js","components/nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","name","className","src","width","height","alt","style","margin","CardList","monstersList","map","monster","index","key","SearchBox","searchInput","InputGroup","size","FormControl","aria-label","aria-describedby","type","placeholder","onChange","boxShadow","color","fontWeight","Nav","Navbar","fixed","padding","Brand","fontSize","animation","background","borderRadius","logo","App","searchChangeHandler","event","setState","searchField","target","value","showList","state","listOn","monsters","fetch","then","response","json","users","catch","err","console","log","this","filteredMonststers","filter","toLowerCase","includes","length","Button","variant","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,6RCG7BC,G,MAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvB,OACK,yBAAKC,UAAU,kBAEV,yBAAKC,IAAG,mCAA8BH,GAAMI,MAAM,QAAQC,OAAO,QAAQC,IAAI,WAAWC,MAAO,CAACC,OAAQ,YACxG,6BACK,2BAAIP,OCLXQ,G,MAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEtB,OACK,yBAAKR,UAAU,aAEVQ,EAAaC,KAAI,SAACC,EAASC,GACtB,OACK,kBAAC,EAAD,CACAC,IAAKF,EAAQZ,GACbA,GAAIU,EAAaG,GAAOb,GACxBC,KAAMS,EAAaG,GAAOZ,a,wBCTtCc,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACvB,OACK,6BACK,kBAACC,EAAA,EAAD,CAAYC,KAAK,KAChBX,MAAO,CACHH,MAAO,MACPI,OAAQ,yBAGR,kBAACW,EAAA,EAAD,CAAaC,aAAW,QAAQC,mBAAiB,uBACjDC,KAAK,SACLC,YAAY,WACZC,SAAUR,EACVT,MAAO,CACFkB,UAAW,gCACXC,MAAO,oBACPC,WAAY,Y,yCChBxBC,G,MAAM,WACd,OACK,oCACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMvB,MAAO,CAACwB,QAAQ,KACpC7B,UAAU,UACV,kBAAC2B,EAAA,EAAOG,MAAR,CACAzB,MAAO,CACF0B,SAAU,qBACVC,UAAW,yCACXC,WAAY,+DACZV,UAAW,iCACXrB,MAAM,OACNgC,aAAc,OACd5B,OAAQ,oBAGR,yBACAF,IAAI,GACJH,IAAKkC,IACLnC,UAAU,cACP,IAfR,qBC2EKoC,E,YA5Eb,aAAe,IAAD,8BACZ,+CASFC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAX7B,EAedC,SAAU,WACV,IAAMA,EAAW,EAAKC,MAAMC,OAC5B,EAAKN,SAAS,CAACM,QAASF,KAftB,EAAKC,MAAQ,CACXE,SAAU,GACVN,YAAa,GACbK,QAAQ,GALE,E,iFAqBM,IAAD,OACjBE,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OACX,EAAKZ,SAAS,CAACO,SAAUK,OACxBC,OAAM,SAAAC,GAAG,OAAKC,QAAQC,IAAIF,Q,+BAGnB,IAAD,EAE2BG,KAAKZ,MAA/BE,EAFD,EAECA,SAAUN,EAFX,EAEWA,YACZiB,EAAqBX,EAASY,QAAO,SAAAhD,GACzC,OAAOA,EAAQX,KAAK4D,cAAcC,SAASpB,EAAYmB,kBAErDnD,EAAe,KAWnB,OAVGgD,KAAKZ,MAAMC,SACZrC,EAEE,6BACE,kBAAC,EAAD,CACFA,aAAciD,MAOa,IAA7BD,KAAKZ,MAAME,SAASe,OACpB,wBAAI7D,UAAU,WAAd,mBAEA,yBAAKA,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEc,YAAa0C,KAAKnB,sBAElB,kBAACyB,EAAA,EAAD,CAAQC,QAAQ,eAChBC,QAASR,KAAKb,SACd3C,UAAU,WACVK,MAAO,CACLmB,MAAO,qBACPO,SAAU,SACVF,QAAS,SAGV2B,KAAKZ,MAAMC,OACX,YACC,aAEDrC,EAlBH,S,GApDYyD,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.76e86d87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport \"./Card.style.css\";\r\n\r\n export const Card = ({ id, name }) => {\r\n     return (\r\n          <div className=\"card-container\">\r\n          \r\n               <img src={`https://www.robohash.org/${id}`} width=\"250px\" height=\"250px\" alt=\"monsters\" style={{margin: \"0 auto\"}}/>\r\n               <div>\r\n                    <p>{name}</p>\r\n                    \r\n               </div>\r\n               \r\n          \r\n          </div>\r\n     )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Card } from \"../Card/Card\"\r\nimport \"./CardList.style.css\"\r\n\r\nexport const CardList = ({ monstersList }) => {\r\n     \r\n     return (\r\n          <div className=\"card-list\">\r\n          {           \r\n               monstersList.map((monster, index)=>{\r\n                    return (\r\n                         <Card \r\n                         key={monster.id}\r\n                         id={monstersList[index].id}\r\n                         name={monstersList[index].name}                        \r\n                         />\r\n                    )\r\n               })\r\n          }        \r\n          </div>    \r\n     )     \r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.style.css\";\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nexport const SearchBox = ({ searchInput }) => {\r\n     return (\r\n          <div>\r\n               <InputGroup size=\"lg\"\r\n                style={{\r\n                    width: \"30%\",\r\n                    margin: \"175px auto 50px auto\"                   \r\n                    }}\r\n               >\r\n                    <FormControl aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-lg\"\r\n                    type=\"search\"\r\n                    placeholder=\"Search..\"\r\n                    onChange={searchInput}\r\n                    style={{\r\n                         boxShadow: \"1px 1px 5px rgb(21, 233, 180)\",\r\n                         color: \"rgb(92, 105, 109)\",\r\n                         fontWeight: \"100\"                   \r\n                         }}                 \r\n                    />\r\n               </InputGroup>\r\n               \r\n          </div>\r\n     )\r\n}","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport \"./Nav.css\";\r\n\r\nexport const Nav = () => {\r\n     return(\r\n          <>\r\n          <Navbar fixed=\"top\" style={{padding:\"0\"}} \r\n          className=\"navBar\">\r\n          <Navbar.Brand\r\n          style={{ \r\n               fontSize: \"calc(30px + 3vmin)\",          \r\n               animation: \"loading 2.5s linear infinite alternate\",\r\n               background: \"linear-gradient(to left,rgb(21, 233, 180),rgb(10, 170, 245))\",\r\n               boxShadow: \"2px 2px 10px rgb(21, 233, 180)\",\r\n               width:\"100%\",\r\n               borderRadius: \"10px\",\r\n               margin: \"auto 0px auto 0\"        \r\n               }}\r\n          >\r\n               <img\r\n               alt=\"\"\r\n               src={logo}            \r\n               className=\" App-logo\"\r\n               />{' '}\r\n               Robo Monsters\r\n          </Navbar.Brand>\r\n          </Navbar>\r\n</>\r\n     )\r\n}","import React, { Component } from 'react';\r\nimport { CardList }from \"../src/components/card-list/CardList\"\r\nimport { SearchBox } from \"../src/components/searchBox/search-box\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './App.css';\r\nimport { Nav } from './components/nav/Nav';\r\n\r\nclass App extends Component {\r\n  constructor (){\r\n    super()\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\",\r\n      listOn: true\r\n    }\r\n  }\r\n\r\n  // properties:\r\n  searchChangeHandler = (event) => {\r\n    this.setState({searchField: event.target.value})\r\n  }\r\n\r\n  //show list on/off\r\n  showList =() => {\r\n  const showList = this.state.listOn;\r\n  this.setState({listOn: !showList})\r\n  } \r\n\r\n  //React Life Cycles\r\n  componentDidMount(){\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(users =>\r\n    this.setState({monsters: users}))\r\n    .catch(err => (console.log(err)))\r\n  }\r\n  \r\n  render() {\r\n\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonststers = monsters.filter(monster => {\r\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    let monstersList = null;\r\n    if(this.state.listOn){\r\n      monstersList = (\r\n        \r\n        <div>\r\n          <CardList\r\n        monstersList={filteredMonststers}/>\r\n        </div>  \r\n      )\r\n    }\r\n     \r\n    return ( \r\n           \r\n      this.state.monsters.length===0?\r\n      <h1 className=\"loading\">Please wait ...</h1>:\r\n\r\n      <div className=\"App\"> \r\n      <Nav />                \r\n      <SearchBox\r\n        searchInput={this.searchChangeHandler}\r\n        />   \r\n        <Button variant=\"outline-info\"\r\n        onClick={this.showList}\r\n        className=\"btn-list\"\r\n        style={{\r\n          color: \"rgb(100, 220, 250)\",\r\n          fontSize: \"1.15em\",\r\n          padding: \"10px\"\r\n        }}\r\n        >\r\n        {this.state.listOn?         \r\n         \"Hide List\":\r\n          \"Show List\"}         \r\n          </Button>          \r\n        {monstersList} {/* the else statement */}\r\n      </div> \r\n  )\r\n}\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}